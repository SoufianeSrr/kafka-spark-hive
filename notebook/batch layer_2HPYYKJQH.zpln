{
  "paragraphs": [
    {
      "text": "%pyspark\n",
      "user": "anonymous",
      "dateUpdated": "2023-01-01 09:55:09.192",
      "progress": 0,
      "config": {},
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1672566909189_1398364978",
      "id": "paragraph_1672566909189_1398364978",
      "dateCreated": "2023-01-01 09:55:09.191",
      "status": "READY"
    },
    {
      "text": "%pyspark\nimport time\nimport datetime\nimport tweepy\nfrom textblob import TextBlob\nfrom kafka import KafkaProducer\nfrom json import dumps\n \nimport pandas as pd\nfrom datetime import date\n\n\n\n#cedentials Tweete API\n\nCONSUMER_KEY \u003d \"C7jP0MlDhChWFItYx4vL0GyjP\"\nCONSUMER_SECRET \u003d \"qYQkVuPYkzcIs8eokQwznVamhqiOUzbhjejypjwXVYoWrmhPWa\"\nACCESS_TOKEN \u003d \"1585914093101359105-0JnYrYTA0jQap9aQ7KPEIoSI2vkklm\"\nACCESS_TOKEN_SECRET \u003d \"agvWZ19hcJERHAH328s9IuGa7I8jlOF3rOl5ZG3CXn8rC\"\n\n#stream function\ndata \u003d []\ndef stream(interval):\n    while True:\n\n        def json_serial(obj):\n            \"\"\"JSON serializer for objects not serializable by default json code\"\"\"\n        \n            if isinstance(obj, (datetime, datetime.date)):\n                return obj.isoformat()\n            raise TypeError(\"Type %s not serializable\" % type(obj))\n        #authentification to tweeter\n        \n        auth \u003d tweepy.OAuthHandler(CONSUMER_KEY, CONSUMER_SECRET)\n        auth.set_access_token(ACCESS_TOKEN, ACCESS_TOKEN_SECRET)\n        \n        #kafka profucer config {localhost}\n        \n        producer \u003d KafkaProducer(bootstrap_servers\u003d[\u0027192.168.96.76:9092\u0027],value_serializer\u003dlambda K:dumps(K,default\u003djson_serial).encode(\u0027utf-8\u0027))\n        \n        #columns of tweets informations in the         \n        columns \u003d [\u0027PublishedDate\u0027, \u0027User\u0027,\u0027Sentence\u0027,\u0027NumberofTweets\u0027]\n        #la table ou stocker chaque tweet stream\n        \n        api \u003d tweepy.API(auth)\n        cursor \u003d tweepy.Cursor(api.search_tweets,q\u003d\"fifa\",tweet_mode\u003d\u0027extended\u0027).items(20)\n        for tweet in cursor:\n           #Print the users of the tweets\n           print(tweet.user.screen_name)\n           #Print the users of the tweets\n           producer.send(\u0027streamTopic\u0027,[tweet.full_text,tweet.user.screen_name,tweet.user.statuses_count])\n           data.append([tweet.created_at, tweet.user.screen_name,tweet.full_text,tweet.user.statuses_count])\n        df \u003d pd.DataFrame(data, columns\u003dcolumns)\n        print(df)\n        today \u003d date.today()\n        d1 \u003d today.strftime(\"%d-%m-%Y\")\n        filename \u003d \"tweets\"+d1+\u0027.parquet.gzip\u0027\n        df.to_parquet(filename)\n        time.sleep(interval)\n\n       \nstream(3)  # streaming frequency",
      "user": "anonymous",
      "dateUpdated": "2023-01-01 10:04:48.605",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "ERROR",
        "msg": [
          {
            "type": "TEXT",
            "data": "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n\u001b[0;31mNoBrokersAvailable\u001b[0m                        Traceback (most recent call last)\n\u001b[0;32m\u003cipython-input-8-0e61ff96e37f\u003e\u001b[0m in \u001b[0;36m\u003cmodule\u003e\u001b[0;34m\u001b[0m\n\u001b[1;32m     59\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     60\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---\u003e 61\u001b[0;31m \u001b[0mstream\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# streaming frequency\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\n\u001b[0;32m\u003cipython-input-8-0e61ff96e37f\u003e\u001b[0m in \u001b[0;36mstream\u001b[0;34m(interval)\u001b[0m\n\u001b[1;32m     36\u001b[0m         \u001b[0;31m#kafka profucer config {localhost}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     37\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---\u003e 38\u001b[0;31m         \u001b[0mproducer\u001b[0m \u001b[0;34m\u003d\u001b[0m \u001b[0mKafkaProducer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbootstrap_servers\u001b[0m\u001b[0;34m\u003d\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\u0027192.168.96.76:9092\u0027\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mvalue_serializer\u001b[0m\u001b[0;34m\u003d\u001b[0m\u001b[0;32mlambda\u001b[0m \u001b[0mK\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mdumps\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mK\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mdefault\u001b[0m\u001b[0;34m\u003d\u001b[0m\u001b[0mjson_serial\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mencode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\u0027utf-8\u0027\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     39\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     40\u001b[0m         \u001b[0;31m#columns of tweets informations in the\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\n\u001b[0;32m/opt/conda/lib/python3.7/site-packages/kafka/producer/kafka.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, **configs)\u001b[0m\n\u001b[1;32m    381\u001b[0m         client \u003d KafkaClient(metrics\u003dself._metrics, metric_group_prefix\u003d\u0027producer\u0027,\n\u001b[1;32m    382\u001b[0m                              \u001b[0mwakeup_timeout_ms\u001b[0m\u001b[0;34m\u003d\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconfig\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\u0027max_block_ms\u0027\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--\u003e 383\u001b[0;31m                              **self.config)\n\u001b[0m\u001b[1;32m    384\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    385\u001b[0m         \u001b[0;31m# Get auto-discovered version from client if necessary\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\n\u001b[0;32m/opt/conda/lib/python3.7/site-packages/kafka/client_async.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, **configs)\u001b[0m\n\u001b[1;32m    242\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconfig\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\u0027api_version\u0027\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    243\u001b[0m             \u001b[0mcheck_timeout\u001b[0m \u001b[0;34m\u003d\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconfig\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\u0027api_version_auto_timeout_ms\u0027\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m/\u001b[0m \u001b[0;36m1000\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--\u003e 244\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconfig\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\u0027api_version\u0027\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m\u003d\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcheck_version\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m\u003d\u001b[0m\u001b[0mcheck_timeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    245\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    246\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_can_bootstrap\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\n\u001b[0;32m/opt/conda/lib/python3.7/site-packages/kafka/client_async.py\u001b[0m in \u001b[0;36mcheck_version\u001b[0;34m(self, node_id, timeout, strict)\u001b[0m\n\u001b[1;32m    925\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    926\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_lock\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrelease\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--\u003e 927\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mErrors\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mNoBrokersAvailable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    928\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    929\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mwakeup\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\n\u001b[0;31mNoBrokersAvailable\u001b[0m: NoBrokersAvailable"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1672564405988_1003984246",
      "id": "paragraph_1672564405988_1003984246",
      "dateCreated": "2023-01-01 09:13:25.988",
      "dateStarted": "2023-01-01 10:04:48.688",
      "dateFinished": "2023-01-01 10:05:11.895",
      "status": "ERROR"
    },
    {
      "text": "%pyspark\nfrom pyspark import SparkContext,SparkConf\nfrom pyspark.sql import SparkSession\n\n\nappName\u003d \"hive_pyspark\"\n        \nconf\u003dSparkConf()\nscc\u003dSparkContext.getOrCreate(conf\u003dconf)\nspark \u003d SparkSession(scc).builder.appName(appName).config(\"hive.metastore.uris\",\"thrift://hive-metastore:9083\").enableHiveSupport().getOrCreate()\n        \nr1\u003d[]\nr2\u003d[]\nr3\u003d[]\nr4\u003d[]\nr5\u003d[]\nr6\u003d[]\n         \ntweet\u003dspark.read.parquet(\"tweets21-12-2022.parquet.gzip\")\n\ntweet.show(40)",
      "user": "anonymous",
      "dateUpdated": "2022-12-21 10:07:49.642",
      "progress": 100,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+-------------------+---------------+--------------------+--------------+\n|      PublishedDate|           User|            Sentence|NumberofTweets|\n+-------------------+---------------+--------------------+--------------+\n|2022-12-21 10:04:33| Sureshthalafan|RT @RVCJ_FB: FIFA...|         80169|\n|2022-12-21 10:04:32|     stargurlgp|RT @FARPostZA: 𝐆...|         11310|\n|2022-12-21 10:04:31|     Kunalsaha_|RT @Iamabrar87: @...|           317|\n|2022-12-21 10:04:30| Hariramkoushik|RT @DeependraSonk...|         63771|\n|2022-12-21 10:04:30|FerdinandAmeyi1|I will keep on sa...|            81|\n|2022-12-21 10:04:29|       nsendula|Classement tempor...|         27920|\n|2022-12-21 10:04:29|     syazanatwt|RT @Dexerto: FIFA...|         32003|\n|2022-12-21 10:04:27|ahmdalk94510077|RT @SeCommittee20...|         28642|\n|2022-12-21 10:04:27|    AbsoluTabou|RT @MarocDiplomat...|         27494|\n|2022-12-21 10:04:27|       shawnumo|RT @SavvyRinu: @N...|          8960|\n|2022-12-21 10:04:27|    MattMoroder|Qatar’s Backing O...|         38634|\n|2022-12-21 10:04:27|       jezuzo20|RT @Dexerto: FIFA...|         31025|\n|2022-12-21 10:04:25|   LesoirSports|🇧🇪 ⚽🇧🇪 Mauvai...|        127573|\n|2022-12-21 10:04:24| BoanergeNnamdi|RT @stats_feed: M...|         33391|\n|2022-12-21 10:04:23|   HELPDESK_011|RT @TimelineCR7: ...|          2321|\n|2022-12-21 10:04:23|       journoyt|@newcastleherald ...|         11722|\n|2022-12-21 10:04:22|Chandra29515079|RT @RVCJ_FB: FIFA...|           349|\n|2022-12-21 10:04:22|  BarcaPolskaPL|Nawet FIFA już wi...|          1856|\n|2022-12-21 10:04:21|  CorsicoMaximo|RT @RTErdogan: Fe...|         14736|\n|2022-12-21 10:04:19|  ChelseaReddit|Kylian Mbappe on ...|         58819|\n|2022-12-21 10:05:05| CastroNicolhas|RT @sbc_tips: 💰 ...|           117|\n|2022-12-21 10:05:05|DesireSinclair1|RT @SavvyRinu: @N...|         44557|\n|2022-12-21 10:05:05|       Rex__Xie|RT @SavvyRinu: @N...|         20683|\n|2022-12-21 10:05:05|  Cheongpo_muk_|RT @Dexerto: FIFA...|         47470|\n|2022-12-21 10:05:04|    ElPatron350|@naemlexD1 @Khaye...|          4988|\n|2022-12-21 10:05:04|    Yasnajmanil|RT @HespressFr: L...|          1474|\n|2022-12-21 10:05:03|Sensei_Zucchini|RT @SavvyRinu: @N...|        153434|\n|2022-12-21 10:05:03|   jo1934edunom|RT @jo1934edunom:...|         22952|\n|2022-12-21 10:05:02|    pernile2017|RT @Jungkook__IND...|        602654|\n|2022-12-21 10:05:02|theamazingkamal|RT @oyimzy: NFF e...|         89866|\n|2022-12-21 10:05:02|  itsmrgeoffrey|RT @terryflewers:...|         44246|\n|2022-12-21 10:05:02|   umai_umaibou|RT @LIVERPOOL2991...|          6608|\n|2022-12-21 10:05:01|      AGokcukur|RT @RTErdogan: Fe...|         38506|\n|2022-12-21 10:05:01|yousifbinhammad|RT @FOXSoccer: Mo...|         12100|\n|2022-12-21 10:05:01|    NieR_Sakura|RT @ParionsSport:...|            17|\n|2022-12-21 10:05:00|       PataedeQ|@FCButters Notre ...|          3013|\n|2022-12-21 10:04:59|adenawo_timothy|RT @Cristiano: Th...|         16010|\n|2022-12-21 10:04:59|ShivamT32179623|वाह दीदी वाह आप क...|           294|\n|2022-12-21 10:04:59|    MattMoroder|@RepAdamSchiff Qa...|         38635|\n|2022-12-21 10:04:59|     Naderrosta|RT @MadridXtra: F...|         20528|\n+-------------------+---------------+--------------------+--------------+\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://7ad3d33e3a7f:4040/jobs/job?id\u003d184"
            },
            {
              "jobUrl": "http://7ad3d33e3a7f:4040/jobs/job?id\u003d185"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1671567130171_1427284066",
      "id": "paragraph_1671567130171_1427284066",
      "dateCreated": "2022-12-20 20:12:10.171",
      "dateStarted": "2022-12-21 10:07:49.676",
      "dateFinished": "2022-12-21 10:07:50.054",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\n\ntweet.write.format(\"parquet\").saveAsTable(\"tweettsparquet\")",
      "user": "anonymous",
      "dateUpdated": "2022-12-21 08:00:05.061",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://7ad3d33e3a7f:4040/jobs/job?id\u003d18"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1671567531788_2128546635",
      "id": "paragraph_1671567531788_2128546635",
      "dateCreated": "2022-12-20 20:18:51.788",
      "dateStarted": "2022-12-21 08:00:05.086",
      "dateFinished": "2022-12-21 08:00:05.558",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\n\ndf \u003d spark.sql(\"SELECT * from tweettsparquet\")\ndf.show(20)",
      "user": "anonymous",
      "dateUpdated": "2022-12-21 10:08:11.529",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+-------------------+---------------+--------------------+--------------+\n|      PublishedDate|           User|            Sentence|NumberofTweets|\n+-------------------+---------------+--------------------+--------------+\n|2022-12-21 07:57:25|AntonPa76338590|RT @stats_feed: M...|          1774|\n|2022-12-21 07:57:24|      KimHyoMi8|RT @MasaMaweninda...|        372724|\n|2022-12-21 07:57:23| IllumeNationNG|RT @adensportsnw:...|           352|\n|2022-12-21 07:57:23|         stiboz|@lb_nkosi I block...|         15341|\n|2022-12-21 07:57:22| Ashishtrpathi1|RT @OpIndia_com: ...|        505794|\n|2022-12-21 07:57:22|RishikeshChan20|@IFTWC @IndianFoo...|          1546|\n|2022-12-21 07:57:21|    Ithebhargav|RT @FIFAWorldCup:...|          1411|\n|2022-12-21 07:57:20| LwandoNtentesa|RT @UnplayableZA:...|         93519|\n|2022-12-21 07:57:19|        Hamyvut|je comprends pas ...|         14563|\n|2022-12-21 07:57:18|         AIjugu|RT @TimelineCR7: ...|           210|\n|2022-12-21 07:57:17|   khan_asif_xx|RT @tariqtramboo:...|          9515|\n|2022-12-21 07:57:17|        horoumi|RT @gg_soccer4: 2...|        182590|\n|2022-12-21 07:57:16|       jay_zeea|RT @kenoseio: FIF...|         21449|\n|2022-12-21 07:57:16|       umacollo|RT @Miguel_Boggia...|         36383|\n|2022-12-21 07:57:16|      Favooured|@kanambo1_ @UKTro...|          9561|\n|2022-12-21 07:57:15|  RefilweSeboko|Yall won because ...|         30455|\n|2022-12-21 07:57:14|       dillusys|RT @stats_feed: M...|           567|\n|2022-12-21 07:57:14|   derLehnsherr|Die Frau hat gesa...|         84660|\n|2022-12-21 07:57:13|   binu_bloods4|FIFA President Gi...|          2076|\n|2022-12-21 07:57:13|   pixel_savant|RT @oyimzy: NFF e...|         94417|\n+-------------------+---------------+--------------------+--------------+\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://7ad3d33e3a7f:4040/jobs/job?id\u003d186"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1671567548859_1349857798",
      "id": "paragraph_1671567548859_1349857798",
      "dateCreated": "2022-12-20 20:19:08.859",
      "dateStarted": "2022-12-21 10:08:11.550",
      "dateFinished": "2022-12-21 10:08:11.824",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\n\ntweet.write.format(\"avro\").saveAsTable(\"tweettavro\")",
      "user": "anonymous",
      "dateUpdated": "2022-12-21 08:01:00.582",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://7ad3d33e3a7f:4040/jobs/job?id\u003d21"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1671567768532_1435382260",
      "id": "paragraph_1671567768532_1435382260",
      "dateCreated": "2022-12-20 20:22:48.532",
      "dateStarted": "2022-12-21 08:00:51.837",
      "dateFinished": "2022-12-21 08:00:52.158",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\n\n\ndf \u003d spark.sql(\"SELECT * from tweettavro\")\ndf.show(20)",
      "user": "anonymous",
      "dateUpdated": "2022-12-21 08:06:20.869",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+-------------------+---------------+--------------------+--------------+\n|      PublishedDate|           User|            Sentence|NumberofTweets|\n+-------------------+---------------+--------------------+--------------+\n|2022-12-21 07:57:25|AntonPa76338590|RT @stats_feed: M...|          1774|\n|2022-12-21 07:57:24|      KimHyoMi8|RT @MasaMaweninda...|        372724|\n|2022-12-21 07:57:23| IllumeNationNG|RT @adensportsnw:...|           352|\n|2022-12-21 07:57:23|         stiboz|@lb_nkosi I block...|         15341|\n|2022-12-21 07:57:22| Ashishtrpathi1|RT @OpIndia_com: ...|        505794|\n|2022-12-21 07:57:22|RishikeshChan20|@IFTWC @IndianFoo...|          1546|\n|2022-12-21 07:57:21|    Ithebhargav|RT @FIFAWorldCup:...|          1411|\n|2022-12-21 07:57:20| LwandoNtentesa|RT @UnplayableZA:...|         93519|\n|2022-12-21 07:57:19|        Hamyvut|je comprends pas ...|         14563|\n|2022-12-21 07:57:18|         AIjugu|RT @TimelineCR7: ...|           210|\n|2022-12-21 07:57:17|   khan_asif_xx|RT @tariqtramboo:...|          9515|\n|2022-12-21 07:57:17|        horoumi|RT @gg_soccer4: 2...|        182590|\n|2022-12-21 07:57:16|       jay_zeea|RT @kenoseio: FIF...|         21449|\n|2022-12-21 07:57:16|       umacollo|RT @Miguel_Boggia...|         36383|\n|2022-12-21 07:57:16|      Favooured|@kanambo1_ @UKTro...|          9561|\n|2022-12-21 07:57:15|  RefilweSeboko|Yall won because ...|         30455|\n|2022-12-21 07:57:14|       dillusys|RT @stats_feed: M...|           567|\n|2022-12-21 07:57:14|   derLehnsherr|Die Frau hat gesa...|         84660|\n|2022-12-21 07:57:13|   binu_bloods4|FIFA President Gi...|          2076|\n|2022-12-21 07:57:13|   pixel_savant|RT @oyimzy: NFF e...|         94417|\n+-------------------+---------------+--------------------+--------------+\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://7ad3d33e3a7f:4040/jobs/job?id\u003d31"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1671567810961_1607587345",
      "id": "paragraph_1671567810961_1607587345",
      "dateCreated": "2022-12-20 20:23:30.961",
      "dateStarted": "2022-12-21 08:06:20.889",
      "dateFinished": "2022-12-21 08:06:21.215",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\n\n\ntweet.write.format(\"orc\").saveAsTable(\"tweeettorc\")",
      "user": "anonymous",
      "dateUpdated": "2022-12-21 08:06:33.321",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://7ad3d33e3a7f:4040/jobs/job?id\u003d32"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1671567967102_1259962368",
      "id": "paragraph_1671567967102_1259962368",
      "dateCreated": "2022-12-20 20:26:07.102",
      "dateStarted": "2022-12-21 08:06:33.345",
      "dateFinished": "2022-12-21 08:06:33.663",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\n\ndf \u003d spark.sql(\"SELECT * from tweeettorc\")\ndf.show(20)",
      "user": "anonymous",
      "dateUpdated": "2022-12-21 10:08:19.335",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "+-------------------+---------------+--------------------+--------------+\n|      PublishedDate|           User|            Sentence|NumberofTweets|\n+-------------------+---------------+--------------------+--------------+\n|2022-12-21 07:57:25|AntonPa76338590|RT @stats_feed: M...|          1774|\n|2022-12-21 07:57:24|      KimHyoMi8|RT @MasaMaweninda...|        372724|\n|2022-12-21 07:57:23| IllumeNationNG|RT @adensportsnw:...|           352|\n|2022-12-21 07:57:23|         stiboz|@lb_nkosi I block...|         15341|\n|2022-12-21 07:57:22| Ashishtrpathi1|RT @OpIndia_com: ...|        505794|\n|2022-12-21 07:57:22|RishikeshChan20|@IFTWC @IndianFoo...|          1546|\n|2022-12-21 07:57:21|    Ithebhargav|RT @FIFAWorldCup:...|          1411|\n|2022-12-21 07:57:20| LwandoNtentesa|RT @UnplayableZA:...|         93519|\n|2022-12-21 07:57:19|        Hamyvut|je comprends pas ...|         14563|\n|2022-12-21 07:57:18|         AIjugu|RT @TimelineCR7: ...|           210|\n|2022-12-21 07:57:17|   khan_asif_xx|RT @tariqtramboo:...|          9515|\n|2022-12-21 07:57:17|        horoumi|RT @gg_soccer4: 2...|        182590|\n|2022-12-21 07:57:16|       jay_zeea|RT @kenoseio: FIF...|         21449|\n|2022-12-21 07:57:16|       umacollo|RT @Miguel_Boggia...|         36383|\n|2022-12-21 07:57:16|      Favooured|@kanambo1_ @UKTro...|          9561|\n|2022-12-21 07:57:15|  RefilweSeboko|Yall won because ...|         30455|\n|2022-12-21 07:57:14|       dillusys|RT @stats_feed: M...|           567|\n|2022-12-21 07:57:14|   derLehnsherr|Die Frau hat gesa...|         84660|\n|2022-12-21 07:57:13|   binu_bloods4|FIFA President Gi...|          2076|\n|2022-12-21 07:57:13|   pixel_savant|RT @oyimzy: NFF e...|         94417|\n+-------------------+---------------+--------------------+--------------+\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://7ad3d33e3a7f:4040/jobs/job?id\u003d187"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1671568380091_57389324",
      "id": "paragraph_1671568380091_57389324",
      "dateCreated": "2022-12-20 20:33:00.092",
      "dateStarted": "2022-12-21 10:08:19.360",
      "dateFinished": "2022-12-21 10:08:19.636",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\n\nimport time\nfrom IPython import display\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# Only works for Jupyter Notebooks!\n%matplotlib inline \ncount \u003d 0\nwhile count\u003c10:\n    \n    time.sleep( 3 )\n    top_10_tweets\u003d spark.sql(\"SELECT user,numberoftweets from tweettsavro\")\n    top_10_dfs \u003d top_10_tweets.toPandas()\n    \n    top_10_df\u003d pd.DataFrame(top_10_dfs).fillna(\u0027Others\u0027)\n    \n    \n    display.clear_output(wait\u003dTrue)\n    plt.figure( figsize \u003d ( 30, 8 ) )\n#     sns.barplot(x\u003d\u0027count\u0027,y\u003d\u0027land_cover_specific\u0027, data\u003ddf, palette\u003d\u0027Spectral\u0027)\n    sns.barplot( x\u003d\"user\", y\u003d\"numberoftweets\", data\u003dtop_10_df)\n    plt.show()\n    count\u003dcount+1",
      "user": "anonymous",
      "dateUpdated": "2022-12-21 10:09:08.029",
      "progress": 100,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "IMG",
            "data": "\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1671571261437_1975958962",
      "id": "paragraph_1671571261437_1975958962",
      "dateCreated": "2022-12-20 21:21:01.437",
      "dateStarted": "2022-12-21 10:09:08.048",
      "dateFinished": "2022-12-21 10:09:44.191",
      "status": "FINISHED"
    },
    {
      "text": "%pyspark\n\nimport time\nfrom IPython import display\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# Only works for Jupyter Notebooks!\n%matplotlib inline \ncount \u003d 0\nwhile count \u003c 10:\n    \n    time.sleep( 3 )\n    top_10_tweets\u003dtweet.groupBy(\u0027user\u0027).count()\n    top_10_df \u003d top_10_tweets.toPandas()\n    display.clear_output(wait\u003dTrue)\n    plt.figure( figsize \u003d ( 10, 8 ) )\n#     sns.barplot(x\u003d\u0027count\u0027,y\u003d\u0027land_cover_specific\u0027, data\u003ddf, palette\u003d\u0027Spectral\u0027)\n    sns.barplot( x\u003d\"count\", y\u003d\"user\", data\u003dtop_10_df)\n    plt.show()\n    count \u003d count + 1",
      "user": "anonymous",
      "dateUpdated": "2022-12-21 01:11:28.496",
      "progress": 100,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "ERROR",
        "msg": [
          {
            "type": "IMG",
            "data": "\u003d\u003d\n"
          },
          {
            "type": "TEXT",
            "data": "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)\n\u001b[0;32m\u003cipython-input-136-8b996ae5383d\u003e\u001b[0m in \u001b[0;36m\u003cmodule\u003e\u001b[0;34m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;32mwhile\u001b[0m \u001b[0mcount\u001b[0m \u001b[0;34m\u003c\u001b[0m \u001b[0;36m10\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---\u003e 10\u001b[0;31m     \u001b[0mtime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msleep\u001b[0m\u001b[0;34m(\u001b[0m \u001b[0;36m3\u001b[0m \u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     11\u001b[0m     \u001b[0mtop_10_tweets\u001b[0m\u001b[0;34m\u003d\u001b[0m\u001b[0mtweet\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgroupBy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\u0027user\u0027\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcount\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m     \u001b[0mtop_10_df\u001b[0m \u001b[0;34m\u003d\u001b[0m \u001b[0mtop_10_tweets\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtoPandas\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\n\u001b[0;31mKeyboardInterrupt\u001b[0m: "
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1671568559075_1704649779",
      "id": "paragraph_1671568559075_1704649779",
      "dateCreated": "2022-12-20 20:35:59.075",
      "dateStarted": "2022-12-21 01:11:28.523",
      "dateFinished": "2022-12-21 01:11:54.094",
      "status": "ABORT"
    },
    {
      "text": "%pyspark\n",
      "user": "anonymous",
      "dateUpdated": "2022-12-20 21:17:31.303",
      "progress": 0,
      "config": {},
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1671571051303_126035114",
      "id": "paragraph_1671571051303_126035114",
      "dateCreated": "2022-12-20 21:17:31.303",
      "status": "READY"
    }
  ],
  "name": "batch layer",
  "id": "2HPYYKJQH",
  "defaultInterpreterGroup": "spark",
  "version": "0.9.0",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {},
  "config": {
    "isZeppelinNotebookCronEnable": false
  },
  "info": {}
}